# Rust Web Server

A simple RESTful API server built with Rust, Actix Web, and PostgreSQL.

## Features

- RESTful API endpoints for CRUD operations on items
- Request logging to PostgreSQL database
- Reporting functionality with filterable logs
- Middleware for request handling

## Prerequisites

- Rust (2024 edition or later)
- PostgreSQL
- Environment variables set up in `.env` file

## Dependencies

- [actix-web](https://crates.io/crates/actix-web) - Web framework
- [sqlx](https://crates.io/crates/sqlx) - SQL toolkit with PostgreSQL support
- [chrono](https://crates.io/crates/chrono) - Date/time functionality
- [serde](https://crates.io/crates/serde) and [serde_json](https://crates.io/crates/serde_json) - Serialization/deserialization
- [tokio](https://crates.io/crates/tokio) - Async runtime
- [dotenvy](https://crates.io/crates/dotenvy) - Environment variable management

## Setup

1. Clone the repository
2. Create a .env file with your PostgreSQL connection string:
   ```
   DATABASE_URL=postgres://username:password@localhost/database_name
   ```
3. Set up the database schema:
   ```sql
   CREATE TABLE request_logs (
     id SERIAL PRIMARY KEY,
     timestamp TIMESTAMP NOT NULL,
     method TEXT NOT NULL,
     path TEXT NOT NULL,
     status_code INTEGER NOT NULL,
     params JSONB,
     payload JSONB
   );
   ```

## Running the Server

```bash
cargo run
```

The server will start on `127.0.0.1:8080`

## API Endpoints

- `GET /` - Basic hello endpoint
- `GET /item/{id}` - Get a specific item by ID
- `POST /item` - Create a new item
- `PUT /item/{id}` - Update an existing item
- `DELETE /item/{id}` - Delete an item
- `GET /report` - Get request logs with optional filters (method, status_code, path)

## Project Structure

- main.rs - Main application with routes and handlers
- database.rs - Database connection handling
- logger.rs - Logging middleware
- models.rs - Data models

