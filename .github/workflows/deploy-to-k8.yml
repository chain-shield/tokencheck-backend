
name: Deploy Backend to GKE
on:
  push:
    branches:
      - develop
env:
  PROJECT_ID: keen-oasis-454518-n8
  SERVICE_NAME: tokencheck-backend
  REGION: us-east4
  ENVIRONMENT: production
  CORS_ALLOWED_ORIGIN: https://tokencheck.ai
  DOMAIN: api.tokencheck.ai
  NAMESPACE: develop
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: develop
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker --quiet

      - name: Build and Push Docker Image
        run: |
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials tokencheck-cluster \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }}

      - name: Create Namespace if not exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Application Secrets
        run: |
          kubectl create secret generic tokencheck-secrets \
            --namespace ${{ env.NAMESPACE }} \
            --from-literal=encryption-key="${{ secrets.ENCRYPTION_KEY }}" \
            --from-literal=wallet-address="${{ secrets.WALLET_ADDRESS }}" \
            --from-literal=private-key="${{ secrets.PRIVATE_KEY }}" \
            --from-literal=private-key-2="${{ secrets.PRIVATE_KEY_2 }}" \
            --from-literal=etherscan-api-key="${{ secrets.ETHERSCAN_API_KEY }}" \
            --from-literal=thegraph-api-key="${{ secrets.THEGRAPH_API_KEY }}" \
            --from-literal=openai-api-key="${{ secrets.OPENAI_API_KEY }}" \
            --from-literal=deepseek-api-key="${{ secrets.DEEPSEEK_API_KEY }}" \
            --from-literal=moralis-api-key="${{ secrets.MORALIS_API_KEY }}" \
            --from-literal=moralis-api="${{ secrets.MORALIS_API }}" \
            --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
            --from-literal=database-url="${{ secrets.DATABASE_URL }}" \
            --from-literal=client-id="${{ secrets.CLIENT_ID }}" \
            --from-literal=client-secret="${{ secrets.CLIENT_SECRET }}" \
            --from-literal=auth-url="${{ secrets.AUTH_URL }}" \
            --from-literal=token-url="${{ secrets.TOKEN_URL }}" \
            --from-literal=redirect-uri="${{ secrets.REDIRECT_URI }}" \
            --from-literal=google-auth-url="${{ secrets.GOOGLE_AUTH_URL }}" \
            --from-literal=google-client-id="${{ secrets.GOOGLE_CLIENT_ID }}" \
            --from-literal=google-client-secret="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --from-literal=google-token-url="${{ secrets.GOOGLE_TOKEN_URL }}" \
            --from-literal=google-redirect-uri="${{ secrets.GOOGLE_REDIRECT_URI }}" \
            --from-literal=web-app-auth-callback-url="${{ secrets.WEB_APP_AUTH_CALLBACK_URL }}" \
            --from-literal=cookie-domain=".tokencheck.com" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create GCP Credentials Secret
        env:
          GCP_CREDS: ${{ secrets.GCP_CREDENTIALS }}
        run: |
          echo "$GCP_CREDS" > credentials.json
          kubectl create secret generic cloudsql-credentials \
            --namespace ${{ env.NAMESPACE }} \
            --from-file=credentials.json \
            --dry-run=client -o yaml | kubectl apply -f -
          rm credentials.json

      - name: Create Image Pull Secret
        run: |
          echo '${{ secrets.GCR_PULL_SA_KEY }}' > gcr-pull-sa-key.json
          kubectl create secret docker-registry gcr-pull-secret \
            --namespace ${{ env.NAMESPACE }} \
            --docker-server=gcr.io \
            --docker-username=_json_key \
            --docker-password="$(cat gcr-pull-sa-key.json)" \
            --dry-run=client -o yaml | kubectl apply -f -
          rm gcr-pull-sa-key.json

      - name: Deploy Backend Service and Deployment
        run: |
          kubectl apply -f k8s/tokencheck-backend-deployment.yaml
          kubectl apply -f k8s/tokencheck-backend-service.yaml

      - name: Apply Kubernetes Resources
        run: |
          # Replace environment variables in Kubernetes manifests
          for file in k8s/backend-managed-certificate.yaml k8s/backend-ingress.yaml k8s/frontend-config.yaml; do
            sed -i "s|\${DOMAIN}|${{ env.DOMAIN }}|g" $file
            kubectl apply -f $file
          done

      - name: Wait for Deployment
        run: |
          echo "Waiting for deployment to roll out..."
          kubectl rollout status deployment/tokencheck-backend -n ${{ env.NAMESPACE }} --timeout=600s || true

      - name: Get External IP
        run: |
          echo "Waiting for Ingress to get an external IP (this may take a few minutes)..."
          
          # Try for up to 5 minutes to get the external IP
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get ingress tokencheck-backend-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "Ingress external IP is: $EXTERNAL_IP"
              echo "Once DNS is configured, your API will be available at: https://${{ env.DOMAIN }}"
              break
            fi
            echo "Waiting for external IP... (attempt $i/30)"
            sleep 10
          done
          
          if [ -z "$EXTERNAL_IP" ]; then
            echo "Could not get external IP within the timeout period. Check the ingress status manually."
          fi

      - name: Check Certificate Status
        run: |
          echo "Certificate provisioning can take 15-60 minutes. Checking initial status..."
          kubectl describe managedcertificate tokencheck-backend-cert -n ${{ env.NAMESPACE }}

      - name: Verify Service Endpoints
        run: |
          echo "Deployment complete. Backend services deployed to:"
          echo "- Internal Kubernetes service: tokencheck-backend.${{ env.NAMESPACE }}.svc.cluster.local:8080"
          echo "- External domain (after DNS propagation): https://${{ env.DOMAIN }}"
          
          echo "Checking backend service and pods..."
          kubectl get service tokencheck-backend -n ${{ env.NAMESPACE }}
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=tokencheck-backend
